<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AbcTuneTool</name>
    </assembly>
    <members>
        <member name="T:AbcTuneTool.Form1">
             <summary>
            
             </summary>
        </member>
        <member name="M:AbcTuneTool.Form1.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="F:AbcTuneTool.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AbcTuneTool.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AbcTuneTool.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:AbcTuneTool.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:AbcTuneTool.Common.CharHelper">
            <summary>
                char helper functions
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.IsHex(System.Char)">
            <summary>
                test if a char is a hexadecimal char
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.IsLinebreak(System.Char)">
            <summary>
                test if a char is a line break char
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.IsAsciiLetter(System.Char)">
            <summary>
                test if a char is an ASCII letter
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.IsCr(System.Char)">
            <summary>
                test if a char is a carriage return char
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.IsLf(System.Char)">
            <summary>
                test if a char is a linefeed character
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.CharHelper.MarksInfoField(System.Char)">
            <summary>
                test if a char marks a header field
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.Common.LogEntry">
            <summary>
                log entry
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.LogEntry.#ctor(AbcTuneTool.Common.LogSeverity,System.Int32,System.Object[])">
            <summary>
                create a new log entry
            </summary>
            <param name="severity">severity</param>
            <param name="messageNumber">message number</param>
            <param name="messageParameters">message parameters</param>
        </member>
        <member name="P:AbcTuneTool.Common.LogEntry.Severity">
            <summary>
                message severity
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.LogEntry.MessageNumber">
            <summary>
                message number
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.LogEntry.MessageParameters">
            <summary>
                message parameters
            </summary>
        </member>
        <member name="T:AbcTuneTool.Common.Logger">
            <summary>
                simple logger
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.Logger.#ctor">
            <summary>
                create a new logger
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.Logger.Entries">
            <summary>
                list of log entries
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.Logger.EntryCount">
            <summary>
                number of entries
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.Logger.Log(AbcTuneTool.Common.LogEntry)">
            <summary>
                make a new log entry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:AbcTuneTool.Common.LoggerHelper">
            <summary>
                helper functions for loggers
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.LoggerHelper.Error(AbcTuneTool.Common.Logger,System.Int32,System.Object[])">
            <summary>
                log an error
            </summary>
            <param name="logger"></param>
            <param name="messageNumber"></param>
            <param name="messageParameters"></param>
        </member>
        <member name="M:AbcTuneTool.Common.LoggerHelper.Info(AbcTuneTool.Common.Logger,System.Int32,System.Object[])">
            <summary>
                log an information
            </summary>
            <param name="logger"></param>
            <param name="messageNumber"></param>
            <param name="messageParameters"></param>
        </member>
        <member name="T:AbcTuneTool.Common.LogMessage">
            <summary>
                log message numbers
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.InvalidMnemo1">
            <summary>
                invalid mnemonic: only backslash
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.InvalidMnemo2">
            <summary>
                invalid mnemonic: only backslash
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.UnknownMnemo">
            <summary>
                unknown memo
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.InvalidEntity1">
            <summary>
                invalid entity
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.UnknownEntity">
            <summary>
                unknown entity
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.InvalidFontSize">
            <summary>
                invalid font size
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.RequiredWorkingSetMemory">
            <summary>
                current working set size
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.RequiredDuration">
            <summary>
                required duration
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogMessage.InvalidEntity2">
            <summary>
                invalid entity
            </summary>
        </member>
        <member name="T:AbcTuneTool.Common.LogSeverity">
            <summary>
                log message severity
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogSeverity.Undefined">
            <summary>
                undefined severity
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogSeverity.Information">
            <summary>
                information message
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogSeverity.Warning">
            <summary>
                warning message
            </summary>
        </member>
        <member name="F:AbcTuneTool.Common.LogSeverity.Error">
            <summary>
                error message
            </summary>
        </member>
        <member name="T:AbcTuneTool.Common.LogSeverityHelper">
            <summary>
                message severity helper
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.LogSeverityHelper.ToShortString(AbcTuneTool.Common.LogSeverity)">
            <summary>
                convert a message severity to a short string
            </summary>
            <param name="severity"></param>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.Common.ObjectPoolItem`1">
            <summary>
                object pool item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPoolItem`1.#ctor(AbcTuneTool.Common.ObjectPool{`0})">
            <summary>
                create a new item
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.ObjectPoolItem`1.Item">
            <summary>
                get the item
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.ObjectPoolItem`1.Parent">
            <summary>
                parent pool
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPoolItem`1.Dispose">
            <summary>
                dispose this item
            </summary>
        </member>
        <member name="T:AbcTuneTool.Common.ObjectPool`1">
            <summary>
                pool of objects
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPool`1.GetItem">
            <summary>
                get an item from the object pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPool`1.ReturnItem(AbcTuneTool.Common.ObjectPoolItem{`0})">
            <summary>
                return this item
            </summary>
            <param name="objectPoolItem"></param>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPool`1.ClearItem(AbcTuneTool.Common.ObjectPoolItem{`0})">
            <summary>
                clear an item
            </summary>
            <param name="objectPoolItem"></param>
        </member>
        <member name="T:AbcTuneTool.Common.StringBuilderPool">
            <summary>
                string builder pool
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.StringBuilderPool.ClearItem(AbcTuneTool.Common.ObjectPoolItem{System.Text.StringBuilder})">
            <summary>
                clear an item
            </summary>
            <param name="objectPoolItem"></param>
        </member>
        <member name="T:AbcTuneTool.Common.ListPool`1">
            <summary>
                list pool
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AbcTuneTool.Common.ListPool`1.ClearItem(AbcTuneTool.Common.ObjectPoolItem{System.Collections.Generic.List{`0}})">
            <summary>
                clear the list
            </summary>
            <param name="objectPoolItem"></param>
        </member>
        <member name="T:AbcTuneTool.Common.ListPools">
            <summary>
                list pools
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.ListPools.ObjectLists">
            <summary>
                object list
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.ListPools.GetList">
            <summary>
                get an object list
            </summary>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.Common.ObjectPoolHelpers">
            <summary>
                helper class for object pools
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPoolHelpers.Add(AbcTuneTool.Common.ObjectPoolItem{System.Collections.Generic.List{System.Object}},System.Object)">
            <summary>
                add an item to the list pool
            </summary>
            <param name="pool"></param>
            <param name="item"></param>
        </member>
        <member name="M:AbcTuneTool.Common.ObjectPoolHelpers.ToImmutableArray``1(AbcTuneTool.Common.ObjectPoolItem{System.Collections.Generic.List{System.Object}})">
            <summary>
                convert this list to an immutable array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="T:AbcTuneTool.Common.StringCache">
            <summary>
                cache for allocated strings
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.StringCache.ForChar(System.Char)">
            <summary>
                get a string for a char
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.StringCache.ForStringBuilder(System.Text.StringBuilder)">
            <summary>
                get a string from a string builder
            </summary>
            <param name="stringBuilder">a string builder</param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.StringCache.ForChars(System.Char,System.Char)">
            <summary>
                cache a string for two chars
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.Common.StringCache.ForChars(System.Char,System.Char,System.Char)">
            <summary>
                cache a string for two chars
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.Common.SystemStatus">
            <summary>
                system status information
            </summary>
        </member>
        <member name="M:AbcTuneTool.Common.SystemStatus.#ctor(System.Diagnostics.Process)">
            <summary>
                create a new system status
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:AbcTuneTool.Common.SystemStatus.#ctor(AbcTuneTool.Common.SystemStatus,AbcTuneTool.Common.SystemStatus)">
            <summary>
                create a difference of two status points
            </summary>
            <param name="infoBefore"></param>
            <param name="infoAfterRun"></param>
        </member>
        <member name="M:AbcTuneTool.Common.SystemStatus.ToLogger(AbcTuneTool.Common.Logger)">
            <summary>
                print the system status to a logger
            </summary>
            <param name="logger"></param>
        </member>
        <member name="P:AbcTuneTool.Common.SystemStatus.WorkingSet64">
            <summary>
                working set size
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.SystemStatus.StatusTime">
            <summary>
                status time
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.SystemStatus.RequiredWorkingSet">
            <summary>
                required working set
            </summary>
        </member>
        <member name="P:AbcTuneTool.Common.SystemStatus.Duration">
            <summary>
                required durtion
            </summary>
        </member>
        <member name="T:AbcTuneTool.FileIo.AbcCharacterCache">
            <summary>
                character cache
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcCharacterCache.FromCache(System.String,System.String,AbcTuneTool.Model.TokenKind)">
            <summary>
                get a char reference from the cache
            </summary>
            <param name="value"></param>
            <param name="originalValue"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.FileIo.AbcCharacterReference">
            <summary>
                char reference
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcCharacterReference.#ctor(System.String,System.String,AbcTuneTool.Model.TokenKind)">
            <summary>
                create a new char reference
            </summary>
            <param name="value"></param>
            <param name="originalValue"></param>
            <param name="kind"></param>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcCharacterReference.AbcChar">
            <summary>
                current token
            </summary>
        </member>
        <member name="T:AbcTuneTool.FileIo.AbcParser">
            <summary>
                parser for ABC files
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.#ctor(AbcTuneTool.FileIo.BufferedAbcTokenizer,AbcTuneTool.Common.ListPools)">
            <summary>
                create a new ABC file parser
            </summary>
            <param name="tokenizer"></param>
            <param name="listPools">list pools</param>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcParser.Tokenizer">
            <summary>
                tokenizer
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcParser.ListPools">
            <summary>
                list pools
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.ParseInformationField">
            <summary>
                parse an information field
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.ParseInformationFields">
            <summary>
                parse a set of information fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.ParseTune">
            <summary>
                parse a single tune
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.ParseTuneBook">
            <summary>
                parse a tune booke
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.Dispose(System.Boolean)">
            <summary>
                dispose this parser
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcParser.Dispose">
            <summary>
                dispose this parser
            </summary>
        </member>
        <member name="T:AbcTuneTool.FileIo.AbcTokenizer">
            <summary>
                tokenizer for ABC files
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.#ctor(System.IO.TextReader,AbcTuneTool.Common.StringCache,AbcTuneTool.FileIo.AbcCharacterCache,AbcTuneTool.Common.StringBuilderPool,AbcTuneTool.Common.Logger)">
            <summary>
                create a new tokenizer
            </summary>
            <param name="reader">input</param>
            <param name="logger">logger</param>
            <param name="cache">string cache</param>
            <param name="charCache">char cache</param>
            <param name="pool">string builder pool</param>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.ReadChar(System.Char@)">
            <summary>
                read a char
            </summary>
            <returns></returns>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.Reader">
            <summary>
                stream reader
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.Cache">
            <summary>
                string cache
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.Logger">
            <summary>
                logger
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.CharCache">
            <summary>
                char cache
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.StringBuilderPool">
            <summary>
                string builder pool
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.HasToken">
            <summary>
                check if there are token left
            </summary>
        </member>
        <member name="P:AbcTuneTool.FileIo.AbcTokenizer.CurrentToken">
            <summary>
                current token
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.GetToken(System.String,System.String,AbcTuneTool.Model.TokenKind)">
            <summary>
                get a token
            </summary>
            <param name="value"></param>
            <param name="originalValue"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.ReadNextToken">
            <summary>
                read the next toke
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.ReadDefault(System.Char)">
            <summary>
                read a default char
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.ReadComment">
            <summary>
                read a comment value
            </summary>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.Dispose(System.Boolean)">
            <summary>
                dispose this tokenizer
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AbcTuneTool.FileIo.AbcTokenizer.Dispose">
            <summary>
                dispose this tokenizer
            </summary>
        </member>
        <member name="T:AbcTuneTool.FileIo.BufferedAbcTokenizer">
            <summary>
                buffered tokenizer with lookahead
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.BufferedAbcTokenizer.#ctor(AbcTuneTool.FileIo.AbcTokenizer)">
            <summary>
                create a new buffered tokenizer
            </summary>
            <param name="tokenizer"></param>
        </member>
        <member name="P:AbcTuneTool.FileIo.BufferedAbcTokenizer.Tokenizer">
            <summary>
                base tokenizer
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.BufferedAbcTokenizer.Lookahead(System.Int32)">
            <summary>
                look a head a few symbols
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AbcTuneTool.FileIo.BufferedAbcTokenizer.Dispose(System.Boolean)">
            <summary>
                dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AbcTuneTool.FileIo.BufferedAbcTokenizer.Dispose">
            <summary>
                dispose this tokenizer
            </summary>
        </member>
        <member name="T:AbcTuneTool.FileIo.Entities">
            <summary>
                entity utilities
            </summary>
        </member>
        <member name="M:AbcTuneTool.FileIo.Entities.Decode(System.String)">
            <summary>
                decode a entity
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="T:AbcTuneTool.FileIo.Mnemonics">
            <summary>
                ABC mnemonics
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.OtherLines">
            <summary>
                other lines
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.OtherLines.#ctor(System.Collections.Immutable.ImmutableArray{AbcTuneTool.FileIo.AbcCharacterReference})">
            <summary>
                create a new set of other lines
            </summary>
            <param name="lines"></param>
        </member>
        <member name="P:AbcTuneTool.Model.OtherLines.Lines">
            <summary>
                lines
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.Token">
            <summary>
                ABC character
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.Token.#ctor(System.String,System.String,AbcTuneTool.Model.TokenKind)">
            <summary>
                create a new ABC character
            </summary>
            <param name="kind">token kind</param>
            <param name="value">token value</param>
            <param name="originalValue">original value</param>
        </member>
        <member name="P:AbcTuneTool.Model.Token.Value">
            <summary>
                character value
            </summary>
        </member>
        <member name="P:AbcTuneTool.Model.Token.OriginalValue">
            <summary>
                original value
            </summary>
        </member>
        <member name="P:AbcTuneTool.Model.Token.Kind">
            <summary>
                character kind
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.TokenKind">
            <summary>
                ABC character kind
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Undefined">
            <summary>
                undefined kind of token
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Char">
            <summary>
                standard character
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Mnenomic">
            <summary>
                character encoded by mnemonic
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Entity">
            <summary>
                character encoded by entity
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.FixedUnicody2Byte">
            <summary>
                fixed UNICODE 2 byte
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.FixedUnicode4Byte">
            <summary>
                fixed UNICODE 4 byte
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Eof">
            <summary>
                end of file
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Backslash">
            <summary>
                backlash sign
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Percent">
            <summary>
                percent sign
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Ampersand">
            <summary>
                ampersand sign
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Dollar">
            <summary>
                dollar sign
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.FontSize">
            <summary>
                font size
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Comment">
            <summary>
                line of comment / end of line comment
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.LineContinuation">
            <summary>
                line continuation
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.EmptyLine">
            <summary>
                empty line
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.Linebreak">
            <summary>
                line break
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.TokenKind.InformationFieldHeader">
            <summary>
                information field header
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.InformationField">
            <summary>
                information field
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.InformationField.#ctor(AbcTuneTool.FileIo.AbcCharacterReference,System.Collections.Immutable.ImmutableArray{AbcTuneTool.FileIo.AbcCharacterReference})">
            <summary>
                create a new information field
            </summary>
            <param name="field"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="P:AbcTuneTool.Model.InformationField.FieldKind">
            <summary>
                field kind
            </summary>
        </member>
        <member name="P:AbcTuneTool.Model.InformationField.FieldValue">
            <summary>
                field value
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.InformationFieldKind">
            <summary>
                information fields for headers
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Undefined">
            <summary>
                undefined field
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Area">
            <summary>
                area label, deprecated
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Book">
            <summary>
                book label
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Composer">
            <summary>
                composer label
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Discography">
            <summary>
                discography label
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.FileUrl">
            <summary>
                file url label
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Group">
            <summary>
                instrument group
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.History">
            <summary>
                history info
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Instruction">
            <summary>
                instruction
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Key">
            <summary>
                key of the tune
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.UnitNoteLength">
            <summary>
                unit note length
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Meter">
            <summary>
                meter
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Macro">
            <summary>
                macro
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Notes">
            <summary>
                notes
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Parts">
            <summary>
                parts
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Tempo">
            <summary>
                tempo
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Rythm">
            <summary>
                rhythm kind
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Remark">
            <summary>
                remark
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Source">
            <summary>
                tune source
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.SymbolLine">
            <summary>
                symbol ine
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.TuneTitle">
            <summary>
                tune tile
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.UserDefined">
            <summary>
                user defined field
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Voice">
            <summary>
                voice
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.WordsAfterTune">
            <summary>
                words after tune
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.WordsInTune">
            <summary>
                words in tune
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.RefNumber">
            <summary>
                reference number
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFieldKind.Transcription">
            <summary>
                transcription by
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.InformationFields">
            <summary>
                set of information fields
            </summary>
        </member>
        <member name="F:AbcTuneTool.Model.InformationFields.Empty">
            <summary>
                empty set of fields
            </summary>
        </member>
        <member name="P:AbcTuneTool.Model.InformationFields.Fields">
            <summary>
                fields
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.InformationFields.#ctor(System.Collections.Immutable.ImmutableArray{AbcTuneTool.Model.InformationField})">
            <summary>
                create a new set of information fields
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:AbcTuneTool.Model.TuneBook">
            <summary>
                model for a tune book
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.TuneBook.#ctor(AbcTuneTool.Model.InformationFields,System.Collections.Immutable.ImmutableArray{AbcTuneTool.Model.Tune})">
            <summary>
                create a new tune book
            </summary>
            <param name="fileHeader"></param>
            <param name="immutableArrays"></param>
        </member>
        <member name="P:AbcTuneTool.Model.TuneBook.FileHeader">
            <summary>
                file header
            </summary>
        </member>
        <member name="P:AbcTuneTool.Model.TuneBook.Tunes">
            <summary>
                tunes
            </summary>
        </member>
        <member name="T:AbcTuneTool.Model.Tune">
            <summary>
                tune
            </summary>
        </member>
        <member name="M:AbcTuneTool.Model.Tune.#ctor(AbcTuneTool.Model.OtherLines,AbcTuneTool.Model.InformationFields)">
            <summary>
                create a new tune
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:AbcTuneTool.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AbcTuneTool.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AbcTuneTool.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
